{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/mac_ios_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
  pull_request:
    types: [opened, synchronize, reopened, !{{ ciflow_config.trigger_action }}]

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
  workflow_dispatch:

jobs:
!{{ common.ciflow_should_run_job(ciflow_config) }}
{% block build +%}
  build:
    runs-on: macos-10.15
    needs: [!{{ ciflow_config.root_job_name }}]
    env:
      JOB_BASE_NAME: !{{ build_environment }}-build
    steps:
      !{{ common.checkout_pytorch("recursive") }}
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
      - name: Install ios Dependencies
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install libtool
      - name: Run Fastlane
        run: |
          set -e
          cd ios/TestApp
          # install fastlane
          sudo gem install bundler && bundle install
          # install certificates
          echo ${IOS_CERT_KEY_2022} >> cert.txt
          base64 --decode cert.txt -o Certificates.p12
          rm cert.txt
          bundle exec fastlane install_root_cert
          bundle exec fastlane install_dev_cert
          # install the provisioning profile
          PROFILE=PyTorch_CI_2022.mobileprovision
          PROVISIONING_PROFILES=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -pv "${PROVISIONING_PROFILES}"
          cd "${PROVISIONING_PROFILES}"
          echo ${IOS_SIGN_KEY_2022} >> cert.txt
          base64 --decode cert.txt -o ${PROFILE}
          rm cert.txt
      - name: Build
        run: |
          set -e
          export IN_CI=1
          WORKSPACE=/Users/distiller/workspace
          PROJ_ROOT=/Users/distiller/project
          export TCLLIBPATH="/usr/local/lib"

          # Install conda
          curl --retry 3 -o ~/conda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
          chmod +x ~/conda.sh
          /bin/bash ~/conda.sh -b -p ~/anaconda
          export PATH="~/anaconda/bin:${PATH}"
          source ~/anaconda/bin/activate

          # Install dependencies
          retry () {
              $*  || (sleep 1 && $*) || (sleep 2 && $*) || (sleep 4 && $*) || (sleep 8 && $*)
          }

          retry conda install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi requests typing_extensions --yes

          # sync submodules
          cd ${PROJ_ROOT}
          git submodule sync
          git submodule update --init --recursive --depth 1 --jobs 0

          # export
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}

          # run build script
          chmod a+x ${PROJ_ROOT}/scripts/build_ios.sh
          echo "IOS_ARCH: ${IOS_ARCH}"
          echo "IOS_PLATFORM: ${IOS_PLATFORM}"
          echo "USE_PYTORCH_METAL": "${USE_METAL}"
          echo "BUILD_LITE_INTERPRETER": "${BUILD_LITE_INTERPRETER}"
          echo "USE_COREML_DELEGATE": "${USE_COREML_DELEGATE}"

          #check the custom build flag
          echo "SELECTED_OP_LIST: ${SELECTED_OP_LIST}"
          if [ -n "${SELECTED_OP_LIST}" ]; then
              export SELECTED_OP_LIST="${PROJ_ROOT}/ios/TestApp/custom_build/${SELECTED_OP_LIST}"
          fi
          export IOS_ARCH=${IOS_ARCH}
          export IOS_PLATFORM=${IOS_PLATFORM}
          export USE_COREML_DELEGATE=${USE_COREML_DELEGATE}
          if [ ${IOS_PLATFORM} != "SIMULATOR" ]; then
            export USE_PYTORCH_METAL=${USE_METAL}
          fi
          unbuffer ${PROJ_ROOT}/scripts/build_ios.sh 2>&1 | ts
